{"version":3,"sources":["ajax.js"],"names":["root","this","__","_","extend","ajax","exports","parse","req","result","JSON","responseText","e","xhr","type","url","data","callback","methods","success","error","XHR","window","XMLHttpRequest","ActiveXObject","request","location","href","replace","protocol","open","match","setRequestHeader","onreadystatechange","readyState","status","apply","get","put","post","call"],"mappings":"CAoBA,WAEA,YAKA,IAAAA,GAAAC,KACAC,EAAAF,EAAAE,IAAAC,EAAAC,UAAAD,EAEAD,GAAAG,KAAA,WAEA,GAAAC,MAEAC,EAAA,SAAAC,GACA,GAAAC,EAEA,KACAA,EAAAC,KAAAH,MAAAC,EAAAG,cACA,MAAAC,GACAH,EAAAD,EAAAG,aAGA,OAAAF,EAAAD,IAGAK,EAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,GAAAC,IACAC,QAAA,aACAC,MAAA,cAGAC,EAAA,WACA,IACA,MAAA,IAAAC,QAAAC,gBAAAC,cACA,MAAAJ,MAGAK,EAAA,GAAAJ,GAAA,qBA2BA,OAtBAN,KAAAA,GAAAW,SAAAC,MAAA,IAAAC,QAAA,OAAA,IAAAA,QAAA,QAAAF,SAAAG,SAAA,MAIAJ,EAAAK,KAAAhB,EAAAC,GAAA,GAIAD,EAAAiB,MAAA,cACAN,EAAAO,iBAAA,eAAA,oDAGAP,EAAAQ,mBAAA,WACA,IAAAR,EAAAS,aACAT,EAAAU,QAAA,KAAAV,EAAAU,OAAA,IACAjB,EAAAC,QAAAiB,MAAAlB,EAAAX,EAAAkB,IAEAP,EAAAE,MAAAgB,MAAAlB,EAAAX,EAAAkB,OAMAN,QAAA,SAAAF,GAEA,MADAC,GAAAC,QAAAF,EACAC,GAEAE,MAAA,SAAAH,GAEA,MADAC,GAAAE,MAAAH,EACAC,IAqBA,OAhBAZ,GAAA+B,IAAA,SAAAtB,EAAAE,GACA,MAAAJ,GAAA,MAAAE,EAAA,KAAAE,IAGAX,EAAAgC,IAAA,SAAAvB,EAAAC,GACA,MAAAH,GAAA,MAAAE,EAAAC,IAGAV,EAAAiC,KAAA,SAAAxB,EAAAC,GACA,MAAAH,GAAA,OAAAE,EAAAC,IAGAV,EAAAA,UAAA,SAAAS,GACA,MAAAF,GAAA,SAAAE,IAGAT,OAIAkC,KAAAvC","file":"underlongline.js","sourcesContent":["\n/*!\n *      @namespace __\n *      @element   ajax\n *      @homepage  underlinejs.github.io\n *\n *      @status    beta\n *      @version   0.0.1\n *      @author    Jo Santana\n *      @license   Released under the MIT license\n *\n *      @usage:\n *\n *      __.ajax.get('/endpoint').success(function (data, xhr) { ... }).error(function (data, xhr) { ... });\n *      __.ajax.post('/endpoint', data).success(function (data, xhr) { ... }).error(function (data, xhr) { ... });\n *      __.ajax.put('/endpoint', data).success(function (data, xhr) { ... }).error(function (data, xhr) { ... });\n *      __.ajax.delete('/endpoint').success(function (data, xhr) { ... }).error(function (data, xhr) { ... });\n *\n*/\n\n(function()\n{\n    'use strict';\n\n    // Declare root variable - window in the browser, global on the server\n    // Get already define BAT object (if available) or create a new object\n\n    var root = this,\n    __ = root.__ || _.extend({}, _);\n\n    __.ajax = (function ()\n    {\n        var exports = {};\n\n        var parse = function (req) {\n            var result;\n\n            try {\n                result = JSON.parse(req.responseText);\n            } catch (e) {\n                result = req.responseText;\n            }\n\n            return [result, req];\n        };\n\n        var xhr = function (type, url, data, callback) {\n\n            var methods = {\n                success: function () {},\n                error: function () {}\n            };\n\n            var XHR = function () {\n                try {\n                    return new window.XMLHttpRequest() || ActiveXObject;\n                } catch (error) {};\n            };\n\n            var request = new XHR('MSXML2.XMLHTTP.3.0');\n\n            // Remove hash and add protocol if not provided (prefilters might expect it)\n            // We also use the url parameter if available\n\n            url = ((url || location.href) + '').replace(/#.*$/, '').replace(/^\\/\\//, location.protocol + '//');\n\n            // Open connection\n\n            request.open(type, url, true);\n\n            // If method is POST or PUT\n\n            if (type.match(/POST|PUT/g)) {\n                request.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');\n            }\n\n            request.onreadystatechange = function () {\n                if (request.readyState === 4) {\n                    if (request.status >= 200 && request.status < 400) {\n                        methods.success.apply(methods, parse(request));\n                    } else {\n                        methods.error.apply(methods, parse(request));\n                    }\n                }\n            };\n\n            return {\n                success: function (callback) {\n                    methods.success = callback;\n                    return methods;\n                },\n                error: function (callback) {\n                    methods.error = callback;\n                    return methods;\n                }\n            };\n        };\n\n        exports.get = function (url, callback) {\n            return xhr('GET', url, null, callback);\n        };\n\n        exports.put = function (url, data) {\n            return xhr('PUT', url, data);\n        };\n\n        exports.post = function (url, data) {\n            return xhr('POST', url, data);\n        };\n\n        exports.delete = function (url) {\n            return xhr('DELETE', url);\n        };\n\n        return exports;\n\n    })();\n\n}).call(this);\n"],"sourceRoot":"/source/"}